import axios from "axios";

export const getAllRoads = async (position: any, setRoads: any) => {
  try {
    const bbox = [
      // Define bounding box
      position.lat - 0.05,
      position.lng - 0.2,
      position.lat + 0.3,
      position.lng + 0.3,
    ];
    const overpassQuery = `
        [out:json];
        (
          way["highway"](${bbox.join(",")});
        );
        out geom;
      `;

    const response = await axios.post(
      "https://overpass-api.de/api/interpreter",
      overpassQuery
    );
    const roadsData = response.data.elements.map((way: any) =>
      way.geometry.map((coord: any) => [coord.lat, coord.lon])
    );
    setRoads(roadsData);
  } catch (error) {
    console.error("Error fetching road data:", error);
  }
};

export const fixedRoadLine: any = [
  [40.88002, 45.144621],
  [40.879177, 45.143712],
  [40.878932, 45.143425],
  [40.878789, 45.143347],
  [40.878677, 45.143222],
  [40.878349, 45.142932],
  [40.878026, 45.142742],
  [40.877425, 45.142491],
  [40.876811, 45.142416],
  [40.87588, 45.142375],
  [40.875557, 45.142425],
  [40.875222, 45.142525],
  [40.874714, 45.142736],
  [40.874165, 45.143078],
  [40.873768, 45.143265],
  [40.873808, 45.143875],
  [40.873842, 45.143952],
  [40.873897, 45.144005],
  [40.87385, 45.144081],
  [40.873695, 45.144083],
  [40.873586, 45.144149],
  [40.873357, 45.144243],
  [40.873011, 45.14433],
  [40.87293, 45.144327],
  [40.872532, 45.144135],
  [40.871588, 45.143553],
  [40.870951, 45.143632],
  [40.869866, 45.143758],
  [40.869392, 45.143632],
  [40.869282, 45.143638],
  [40.869188, 45.14374],
  [40.869221, 45.143915],
  [40.869329, 45.144169],
  [40.869407, 45.144442],
  [40.869432, 45.145376],
  [40.869404, 45.145585],
  [40.869146, 45.146044],
  [40.869169, 45.146159],
  [40.869233, 45.146229],
  [40.869331, 45.146239],
  [40.86963, 45.146215],
  [40.870126, 45.14648],
  [40.870264, 45.146701],
  [40.870345, 45.147166],
  [40.870371, 45.147549],
  [40.870321, 45.148149],
  [40.870272, 45.148369],
  [40.870288, 45.148616],
  [40.870442, 45.149093],
  [40.870442, 45.149281],
  [40.870386, 45.149544],
  [40.870264, 45.149962],
  [40.870244, 45.150209],
  [40.870284, 45.150805],
  [40.870373, 45.151298],
  [40.870637, 45.15191],
  [40.870694, 45.152205],
  [40.870629, 45.152543],
  [40.870479, 45.152805],
  [40.870264, 45.152945],
  [40.870081, 45.152972],
  [40.869692, 45.152983],
  [40.869412, 45.153052],
  [40.869201, 45.153245],
  [40.869039, 45.153433],
  [40.868885, 45.153734],
  [40.86884, 45.154211],
  [40.868911, 45.15511],
  [40.868876, 45.155456],
  [40.868768, 45.155933],
  [40.86869, 45.15619],
  [40.868568, 45.156306],
  [40.868367, 45.156282],
  [40.868142, 45.15619],
  [40.86798, 45.156051],
  [40.867674, 45.155887],
  [40.867178, 45.155731],
  [40.866416, 45.155743],
  [40.865841, 45.155724],
  [40.86556, 45.155772],
  [40.865057, 45.155733],
  [40.864442, 45.155649],
  [40.863574, 45.155622],
  [40.861895, 45.155764],
  [40.861567, 45.155834],
  [40.860969, 45.156488],
  [40.860839, 45.156558],
  [40.860746, 45.156549],
  [40.860673, 45.156507],
  [40.860564, 45.156389],
  [40.860454, 45.156212],
  [40.860284, 45.155788],
  [40.860138, 45.155316],
  [40.859992, 45.154989],
  [40.859793, 45.154758],
  [40.859594, 45.154619],
  [40.859351, 45.154554],
  [40.859071, 45.154726],
  [40.858769, 45.155061],
  [40.858399, 45.155493],
  [40.858182, 45.155764],
  [40.857937, 45.155879],
  [40.857594, 45.155936],
  [40.856817, 45.156128],
  [40.856255, 45.15633],
  [40.855675, 45.156644],
  [40.854949, 45.157363],
  [40.854654, 45.157548],
  [40.854199, 45.157634],
  [40.854136, 45.157693],
  [40.853766, 45.157531],
  [40.853611, 45.157482],
  [40.853351, 45.157463],
  [40.853188, 45.157505],
  [40.853103, 45.157578],
  [40.853031, 45.157639],
  [40.852841, 45.157877],
  [40.852673, 45.158196],
];
